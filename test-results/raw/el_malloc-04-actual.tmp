{
    // Tests a single allocate followed by freeing that block. The
    // free()'d block should be merged with the other available block
    // into a single large available block.

    void *ptr[16] = {};
    int len = 0;

    ptr[len++] = el_malloc(128);
    printf("\nMALLOC 0\n"); el_print_stats(); printf("\n");
    printf("POINTERS\n"); print_ptrs(ptr, len);

    el_free(ptr[0]);
    printf("\nFREE 0\n"); el_print_stats(); printf("\n");
}

MALLOC 0
HEAP STATS (overhead per node: 40)
heap_start:  0x612000000000
heap_end:    0x612000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3928}
  [  0] head @ 0x6120000000a8 {state: a  size:  3888}
USED LIST: {length:   1  bytes:   168}
  [  0] head @ 0x612000000000 {state: u  size:   128}
HEAP BLOCKS:
[  0] @ 0x612000000000
  state:      u
  size:       128 (total: 0xa8)
  prev:       0x610000000078
  next:       0x610000000098
  user:       0x612000000020
  foot:       0x6120000000a0
  foot->size: 128
[  1] @ 0x6120000000a8
  state:      a
  size:       3888 (total: 0xf58)
  prev:       0x610000000018
  next:       0x610000000038
  user:       0x6120000000c8
  foot:       0x612000000ff8
  foot->size: 3888

POINTERS
ptr[ 0]: 0x612000000020

FREE 0
HEAP STATS (overhead per node: 40)
heap_start:  0x612000000000
heap_end:    0x612000001000
total_bytes: 4096
AVAILABLE LIST: {length:   2  bytes:  8024}
  [  0] head @ 0x612000000000 {state: a  size:  4056}
  [  1] head @ 0x610000000038 {state: E  size:     0}
USED LIST: {length: 18446744073709551615  bytes: 18446744073709547688}
  [  0] head @ 0x610000000098 {state: E  size:     0}
  [  1] head @ (nil) 
