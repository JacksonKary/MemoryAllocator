{
    // Stress testing with many malloc()'s / free()'s. More thoroughly
    // tests combinations of calls and sequences. Implementations that
    // may have appeared correct in simple tests may buckle under such
    // added stress.

    void *ptr[16] = {};
    int len = 0;

    ptr[len++] = el_malloc(128);
    ptr[len++] = el_malloc(256);
    ptr[len++] = el_malloc(64);
    ptr[len++] = el_malloc(200);
    printf("MALLOC 1-4\n"); el_print_stats(); printf("\n");
    printf("POINTERS\n"); print_ptrs(ptr, len);

    el_free(ptr[2]);    ptr[2] = NULL;
    printf("\nFREE 2\n"); el_print_stats(); printf("\n");
    printf("POINTERS\n"); print_ptrs(ptr, len);

    ptr[len++] = el_malloc(64);
    printf("\nMALLOC 5\n"); el_print_stats(); printf("\n");
    printf("POINTERS\n"); print_ptrs(ptr, len);

    el_free(ptr[1]);    ptr[1] = NULL;
    printf("\nFREE 1\n"); el_print_stats(); printf("\n");
    printf("POINTERS\n"); print_ptrs(ptr, len);

    ptr[len++] = el_malloc(50);
    ptr[len++] = el_malloc(50);
    printf("\nMALLOC 6-7\n"); el_print_stats(); printf("\n");
    printf("POINTERS\n"); print_ptrs(ptr, len);

    ptr[len++] = el_malloc(100);
    printf("\nMALLOC 8\n"); el_print_stats(); printf("\n");
    printf("POINTERS\n"); print_ptrs(ptr, len);

    el_free(ptr[5]);   ptr[5] = NULL;
    el_free(ptr[0]);   ptr[0] = NULL;
    el_free(ptr[6]);   ptr[6] = NULL;
    printf("\nFREE 5,0,6\n"); el_print_stats(); printf("\n");
    printf("POINTERS\n"); print_ptrs(ptr, len);

    ptr[len++] = el_malloc(200);
    ptr[len++] = el_malloc(512);
    ptr[len++] = el_malloc(16);
    ptr[len++] = el_malloc(32);
    printf("\nMALLOC 9,10,11\n"); el_print_stats(); printf("\n");
    printf("POINTERS\n"); print_ptrs(ptr, len);
}
MALLOC 1-4
HEAP STATS (overhead per node: 40)
heap_start:  0x612000000000
heap_end:    0x612000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3288}
  [  0] head @ 0x612000000328 {state: a  size:  3248}
USED LIST: {length:   4  bytes:   808}
  [  0] head @ 0x612000000238 {state: u  size:   200}
  [  1] head @ 0x6120000001d0 {state: u  size:    64}
  [  2] head @ 0x6120000000a8 {state: u  size:   256}
  [  3] head @ 0x612000000000 {state: u  size:   128}
HEAP BLOCKS:
[  0] @ 0x612000000000
  state:      u
  size:       128 (total: 0xa8)
  prev:       0x6120000000a8
  next:       0x610000000098
  user:       0x612000000020
  foot:       0x6120000000a0
  foot->size: 128
[  1] @ 0x6120000000a8
  state:      u
  size:       256 (total: 0x128)
  prev:       0x6120000001d0
  next:       0x612000000000
  user:       0x6120000000c8
  foot:       0x6120000001c8
  foot->size: 256
[  2] @ 0x6120000001d0
  state:      u
  size:       64 (total: 0x68)
  prev:       0x612000000238
  next:       0x6120000000a8
  user:       0x6120000001f0
  foot:       0x612000000230
  foot->size: 64
[  3] @ 0x612000000238
  state:      u
  size:       200 (total: 0xf0)
  prev:       0x610000000078
  next:       0x6120000001d0
  user:       0x612000000258
  foot:       0x612000000320
  foot->size: 200
[  4] @ 0x612000000328
  state:      a
  size:       3248 (total: 0xcd8)
  prev:       0x610000000018
  next:       0x610000000038
  user:       0x612000000348
  foot:       0x612000000ff8
  foot->size: 3248

POINTERS
ptr[ 0]: 0x612000000020
ptr[ 1]: 0x6120000000c8
ptr[ 2]: 0x6120000001f0
ptr[ 3]: 0x612000000258

FREE 2
HEAP STATS (overhead per node: 40)
heap_start:  0x612000000000
heap_end:    0x612000001000
total_bytes: 4096
AVAILABLE LIST: {length:   2  bytes:  3392}
  [  0] head @ 0x6120000001d0 {state: a  size:    64}
  [  1] head @ 0x612000000328 {state: a  size:  3248}
USED LIST: {length:   3  bytes:   704}
  [  0] head @ 0x612000000238 {state: u  size:   200}
  [  1] head @ 0x6120000000a8 {state: u  size:   256}
  [  2] head @ 0x612000000000 {state: u  size:   128}
HEAP BLOCKS:
[  0] @ 0x612000000000
  state:      u
  size:       128 (total: 0xa8)
  prev:       0x6120000000a8
  next:       0x610000000098
  user:       0x612000000020
  foot:       0x6120000000a0
  foot->size: 128
[  1] @ 0x6120000000a8
  state:      u
  size:       256 (total: 0x128)
  prev:       0x612000000238
  next:       0x612000000000
  user:       0x6120000000c8
  foot:       0x6120000001c8
  foot->size: 256
[  2] @ 0x6120000001d0
  state:      a
  size:       64 (total: 0x68)
  prev:       0x610000000018
  next:       0x612000000328
  user:       0x6120000001f0
  foot:       0x612000000230
  foot->size: 64
[  3] @ 0x612000000238
  state:      u
  size:       200 (total: 0xf0)
  prev:       0x610000000078
  next:       0x6120000000a8
  user:       0x612000000258
  foot:       0x612000000320
  foot->size: 200
[  4] @ 0x612000000328
  state:      a
  size:       3248 (total: 0xcd8)
  prev:       0x6120000001d0
  next:       0x610000000038
  user:       0x612000000348
  foot:       0x612000000ff8
  foot->size: 3248

POINTERS
ptr[ 0]: 0x612000000020
ptr[ 1]: 0x6120000000c8
ptr[ 2]: (nil)
ptr[ 3]: 0x612000000258
