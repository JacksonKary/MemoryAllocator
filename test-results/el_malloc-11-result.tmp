* (TEST 11) Append Pages 1
COMMENTS:
** program: ./test_el_malloc "Append Pages 1"

** --- Failure messages --- 
- FAILURE(139) due to SIGSEGV (segmentation fault) from OS
- FAILURE: Output Mismatch at lines marked

** --- Side by Side Differences ---
- Expect output in: test-results/raw/el_malloc-11-expect.tmp
- Actual output in: test-results/raw/el_malloc-11-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
#+BEGIN_SRC sbs-diff
==== EXPECT ====                                                       ==== ACTUAL ====                                                    
{                                                                      {
    // Tests if el_append_pages_to_heap(1) works correctly. The heap       // Tests if el_append_pages_to_heap(1) works correctly. The heap
    // has 1 used block after malloc()'ing and no extra                    // has 1 used block after malloc()'ing and no extra
    // space. Expanding by 1 page gives a new available block and a        // space. Expanding by 1 page gives a new available block and a
    // larger heap size.                                                   // larger heap size.
    void *ptr = el_malloc(EL_PAGE_BYTES-EL_BLOCK_OVERHEAD);                void *ptr = el_malloc(EL_PAGE_BYTES-EL_BLOCK_OVERHEAD);
    printf("HEAP AFTER 1 MALLOC()\n");                                     printf("HEAP AFTER 1 MALLOC()\n");
    el_print_stats(); printf("\n");                                        el_print_stats(); printf("\n");

    int ret = el_append_pages_to_heap(1);                                  int ret = el_append_pages_to_heap(1);
    printf("EXPANDED HEAP, ret: %d\n",ret);                                printf("EXPANDED HEAP, ret: %d\n",ret);
    el_print_stats(); printf("\n");                                        el_print_stats(); printf("\n");

    el_free(ptr);                                                          el_free(ptr);
    printf("EXPANDED HEAP AFTER FREE\n");                                  printf("EXPANDED HEAP AFTER FREE\n");
    el_print_stats(); printf("\n");                                        el_print_stats(); printf("\n");
}                                                                      }
HEAP AFTER 1 MALLOC()                                                <
HEAP STATS (overhead per node: 40)                                   <
heap_start:  0x612000000000                                          <
heap_end:    0x612000001000                                          <
total_bytes: 4096                                                    <
AVAILABLE LIST: {length:   0  bytes:     0}                          <
USED LIST: {length:   1  bytes:  4096}                               <
  [  0] head @ 0x612000000000 {state: u  size:  4056}                <
HEAP BLOCKS:                                                         <
[  0] @ 0x612000000000                                               <
  state:      u                                                      <
  size:       4056 (total: 0x1000)                                   <
  prev:       0x610000000078                                         <
  next:       0x610000000098                                         <
  user:       0x612000000020                                         <
  foot:       0x612000000ff8                                         <
  foot->size: 4056                                                   <
                                                                     <
EXPANDED HEAP, ret: 0                                                <
HEAP STATS (overhead per node: 40)                                   <
heap_start:  0x612000000000                                          <
heap_end:    0x612000002000                                          <
total_bytes: 8192                                                    <
AVAILABLE LIST: {length:   1  bytes:  4096}                          <
  [  0] head @ 0x612000001000 {state: a  size:  4056}                <
USED LIST: {length:   1  bytes:  4096}                               <
  [  0] head @ 0x612000000000 {state: u  size:  4056}                <
HEAP BLOCKS:                                                         <
[  0] @ 0x612000000000                                               <
  state:      u                                                      <
  size:       4056 (total: 0x1000)                                   <
  prev:       0x610000000078                                         <
  next:       0x610000000098                                         <
  user:       0x612000000020                                         <
  foot:       0x612000000ff8                                         <
  foot->size: 4056                                                   <
[  1] @ 0x612000001000                                               <
  state:      a                                                      <
  size:       4056 (total: 0x1000)                                   <
  prev:       0x610000000018                                         <
  next:       0x610000000038                                         <
  user:       0x612000001020                                         <
  foot:       0x612000001ff8                                         <
  foot->size: 4056                                                   <
                                                                     <
EXPANDED HEAP AFTER FREE                                             <
HEAP STATS (overhead per node: 40)                                   <
heap_start:  0x612000000000                                          <
heap_end:    0x612000002000                                          <
total_bytes: 8192                                                    <
AVAILABLE LIST: {length:   1  bytes:  8192}                          <
  [  0] head @ 0x612000000000 {state: a  size:  8152}                <
USED LIST: {length:   0  bytes:     0}                               <
HEAP BLOCKS:                                                         <
[  0] @ 0x612000000000                                               <
  state:      a                                                      <
  size:       8152 (total: 0x2000)                                   <
  prev:       0x610000000018                                         <
  next:       0x610000000038                                         <
  user:       0x612000000020                                         <
  foot:       0x612000001ff8                                         <
  foot->size: 8152                                                   <
                                                                     <
#+END_SRC

** --- Line Differences ---
EXPECT:  18) HEAP AFTER 1 MALLOC()
EXPECT:  19) HEAP STATS (overhead per node: 40)
EXPECT:  20) heap_start:  0x612000000000
EXPECT:  21) heap_end:    0x612000001000
EXPECT:  22) total_bytes: 4096
EXPECT:  23) AVAILABLE LIST: {length:   0  bytes:     0}
EXPECT:  24) USED LIST: {length:   1  bytes:  4096}
EXPECT:  25)   [  0] head @ 0x612000000000 {state: u  size:  4056}
EXPECT:  26) HEAP BLOCKS:
EXPECT:  27) [  0] @ 0x612000000000
EXPECT:  28)   state:      u
EXPECT:  29)   size:       4056 (total: 0x1000)
EXPECT:  30)   prev:       0x610000000078
EXPECT:  31)   next:       0x610000000098
EXPECT:  32)   user:       0x612000000020
EXPECT:  33)   foot:       0x612000000ff8
EXPECT:  34)   foot->size: 4056
EXPECT:  35) 
EXPECT:  36) EXPANDED HEAP, ret: 0
EXPECT:  37) HEAP STATS (overhead per node: 40)
EXPECT:  38) heap_start:  0x612000000000
EXPECT:  39) heap_end:    0x612000002000
EXPECT:  40) total_bytes: 8192
EXPECT:  41) AVAILABLE LIST: {length:   1  bytes:  4096}
EXPECT:  42)   [  0] head @ 0x612000001000 {state: a  size:  4056}
EXPECT:  43) USED LIST: {length:   1  bytes:  4096}
EXPECT:  44)   [  0] head @ 0x612000000000 {state: u  size:  4056}
EXPECT:  45) HEAP BLOCKS:
EXPECT:  46) [  0] @ 0x612000000000
EXPECT:  47)   state:      u
EXPECT:  48)   size:       4056 (total: 0x1000)
EXPECT:  49)   prev:       0x610000000078
EXPECT:  50)   next:       0x610000000098
EXPECT:  51)   user:       0x612000000020
EXPECT:  52)   foot:       0x612000000ff8
EXPECT:  53)   foot->size: 4056
EXPECT:  54) [  1] @ 0x612000001000
EXPECT:  55)   state:      a
EXPECT:  56)   size:       4056 (total: 0x1000)
EXPECT:  57)   prev:       0x610000000018
EXPECT:  58)   next:       0x610000000038
EXPECT:  59)   user:       0x612000001020
EXPECT:  60)   foot:       0x612000001ff8
EXPECT:  61)   foot->size: 4056
EXPECT:  62) 
EXPECT:  63) EXPANDED HEAP AFTER FREE
EXPECT:  64) HEAP STATS (overhead per node: 40)
EXPECT:  65) heap_start:  0x612000000000
EXPECT:  66) heap_end:    0x612000002000
EXPECT:  67) total_bytes: 8192
EXPECT:  68) AVAILABLE LIST: {length:   1  bytes:  8192}
EXPECT:  69)   [  0] head @ 0x612000000000 {state: a  size:  8152}
EXPECT:  70) USED LIST: {length:   0  bytes:     0}
EXPECT:  71) HEAP BLOCKS:
EXPECT:  72) [  0] @ 0x612000000000
EXPECT:  73)   state:      a
EXPECT:  74)   size:       8152 (total: 0x2000)
EXPECT:  75)   prev:       0x610000000018
EXPECT:  76)   next:       0x610000000038
EXPECT:  77)   user:       0x612000000020
EXPECT:  78)   foot:       0x612000001ff8
EXPECT:  79)   foot->size: 8152
EXPECT:  80) 

--- Valgrind Log from: test-results/raw/el_malloc-11-valgrd.tmp ---
==2798084== Memcheck, a memory error detector
==2798084== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2798084== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==2798084== Command: ./test_el_malloc Append\ Pages\ 1
==2798084== Parent PID: 2798083
==2798084== 
==2798084== Invalid write of size 8
==2798084==    at 0x10AE3E: el_add_block_front (el_malloc.c:258)
==2798084==    by 0x10AF8E: el_malloc (el_malloc.c:351)
==2798084==    by 0x10A62C: main (test_el_malloc.c:411)
==2798084==  Address 0x18 is not stack'd, malloc'd or (recently) free'd
==2798084== 
==2798084== 
==2798084== Process terminating with default action of signal 11 (SIGSEGV)
==2798084==  Access not within mapped region at address 0x18
==2798084==    at 0x10AE3E: el_add_block_front (el_malloc.c:258)
==2798084==    by 0x10AF8E: el_malloc (el_malloc.c:351)
==2798084==    by 0x10A62C: main (test_el_malloc.c:411)
==2798084==  If you believe this happened as a result of a stack
==2798084==  overflow in your program's main thread (unlikely but
==2798084==  possible), you can try to increase the size of the
==2798084==  main thread stack using the --main-stacksize= flag.
==2798084==  The main thread stack size used in this run was 8388608.
==2798084== 
==2798084== HEAP SUMMARY:
==2798084==     in use at exit: 0 bytes in 0 blocks
==2798084==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==2798084== 
==2798084== All heap blocks were freed -- no leaks are possible
==2798084== 
==2798084== For lists of detected and suppressed errors, rerun with: -s
==2798084== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

