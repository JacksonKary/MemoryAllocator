* (TEST 9) No Split Block
COMMENTS:
** program: ./test_el_malloc "No Split"

** --- Failure messages --- 
- FAILURE(139) due to SIGSEGV (segmentation fault) from OS
- FAILURE: Output Mismatch at lines marked

** --- Side by Side Differences ---
- Expect output in: test-results/raw/el_malloc-09-expect.tmp
- Actual output in: test-results/raw/el_malloc-09-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
#+BEGIN_SRC sbs-diff
==== EXPECT ====                                                         ==== ACTUAL ====                                                      
{                                                                        {
    // Checks that allocation of blocks close to the size available in       // Checks that allocation of blocks close to the size available in
    // the block does not split the block.                                   // the block does not split the block.
    void *ptr[16] = {}; int len = 0;                                         void *ptr[16] = {}; int len = 0;

    ptr[len++] = el_malloc(2008); // split                                   ptr[len++] = el_malloc(2008); // split
    ptr[len++] = el_malloc(2008); // NOT split                               ptr[len++] = el_malloc(2008); // NOT split
    printf("POINTERS\n"); print_ptrs(ptr, len);                              printf("POINTERS\n"); print_ptrs(ptr, len);
    printf("\nUSED BLOCKS 1\n"); el_print_stats(); printf("\n");             printf("\nUSED BLOCKS 1\n"); el_print_stats(); printf("\n");

    el_free(ptr[0]); ptr[0] = NULL;                                          el_free(ptr[0]); ptr[0] = NULL;
    ptr[len++] = el_malloc(1008); // split, 1000 left                        ptr[len++] = el_malloc(1008); // split, 1000 left
    ptr[len++] = el_malloc(980);  // NOT split                               ptr[len++] = el_malloc(980);  // NOT split
    printf("POINTERS\n"); print_ptrs(ptr, len);                              printf("POINTERS\n"); print_ptrs(ptr, len);
    printf("\nUSED BLOCKS 2\n"); el_print_stats(); printf("\n");             printf("\nUSED BLOCKS 2\n"); el_print_stats(); printf("\n");
}                                                                        }
POINTERS                                                               <
ptr[ 0]: 0x612000000020                                                <
ptr[ 1]: 0x612000000820                                                <
                                                                       <
USED BLOCKS 1                                                          <
HEAP STATS (overhead per node: 40)                                     <
heap_start:  0x612000000000                                            <
heap_end:    0x612000001000                                            <
total_bytes: 4096                                                      <
AVAILABLE LIST: {length:   0  bytes:     0}                            <
USED LIST: {length:   2  bytes:  4096}                                 <
  [  0] head @ 0x612000000800 {state: u  size:  2008}                  <
  [  1] head @ 0x612000000000 {state: u  size:  2008}                  <
HEAP BLOCKS:                                                           <
[  0] @ 0x612000000000                                                 <
  state:      u                                                        <
  size:       2008 (total: 0x800)                                      <
  prev:       0x612000000800                                           <
  next:       0x610000000098                                           <
  user:       0x612000000020                                           <
  foot:       0x6120000007f8                                           <
  foot->size: 2008                                                     <
[  1] @ 0x612000000800                                                 <
  state:      u                                                        <
  size:       2008 (total: 0x800)                                      <
  prev:       0x610000000078                                           <
  next:       0x612000000000                                           <
  user:       0x612000000820                                           <
  foot:       0x612000000ff8                                           <
  foot->size: 2008                                                     <
                                                                       <
POINTERS                                                               <
ptr[ 0]: (nil)                                                         <
ptr[ 1]: 0x612000000820                                                <
ptr[ 2]: 0x612000000020                                                <
ptr[ 3]: (nil)                                                         <
                                                                       <
USED BLOCKS 2                                                          <
HEAP STATS (overhead per node: 40)                                     <
heap_start:  0x612000000000                                            <
heap_end:    0x612000001000                                            <
total_bytes: 4096                                                      <
AVAILABLE LIST: {length:   1  bytes:  1000}                            <
  [  0] head @ 0x612000000418 {state: a  size:   960}                  <
USED LIST: {length:   2  bytes:  3096}                                 <
  [  0] head @ 0x612000000000 {state: u  size:  1008}                  <
  [  1] head @ 0x612000000800 {state: u  size:  2008}                  <
HEAP BLOCKS:                                                           <
[  0] @ 0x612000000000                                                 <
  state:      u                                                        <
  size:       1008 (total: 0x418)                                      <
  prev:       0x610000000078                                           <
  next:       0x612000000800                                           <
  user:       0x612000000020                                           <
  foot:       0x612000000410                                           <
  foot->size: 1008                                                     <
[  1] @ 0x612000000418                                                 <
  state:      a                                                        <
  size:       960 (total: 0x3e8)                                       <
  prev:       0x610000000018                                           <
  next:       0x610000000038                                           <
  user:       0x612000000438                                           <
  foot:       0x6120000007f8                                           <
  foot->size: 960                                                      <
[  2] @ 0x612000000800                                                 <
  state:      u                                                        <
  size:       2008 (total: 0x800)                                      <
  prev:       0x612000000000                                           <
  next:       0x610000000098                                           <
  user:       0x612000000820                                           <
  foot:       0x612000000ff8                                           <
  foot->size: 2008                                                     <
                                                                       <
#+END_SRC

** --- Line Differences ---
EXPECT:  17) POINTERS
EXPECT:  18) ptr[ 0]: 0x612000000020
EXPECT:  19) ptr[ 1]: 0x612000000820
EXPECT:  20) 
EXPECT:  21) USED BLOCKS 1
EXPECT:  22) HEAP STATS (overhead per node: 40)
EXPECT:  23) heap_start:  0x612000000000
EXPECT:  24) heap_end:    0x612000001000
EXPECT:  25) total_bytes: 4096
EXPECT:  26) AVAILABLE LIST: {length:   0  bytes:     0}
EXPECT:  27) USED LIST: {length:   2  bytes:  4096}
EXPECT:  28)   [  0] head @ 0x612000000800 {state: u  size:  2008}
EXPECT:  29)   [  1] head @ 0x612000000000 {state: u  size:  2008}
EXPECT:  30) HEAP BLOCKS:
EXPECT:  31) [  0] @ 0x612000000000
EXPECT:  32)   state:      u
EXPECT:  33)   size:       2008 (total: 0x800)
EXPECT:  34)   prev:       0x612000000800
EXPECT:  35)   next:       0x610000000098
EXPECT:  36)   user:       0x612000000020
EXPECT:  37)   foot:       0x6120000007f8
EXPECT:  38)   foot->size: 2008
EXPECT:  39) [  1] @ 0x612000000800
EXPECT:  40)   state:      u
EXPECT:  41)   size:       2008 (total: 0x800)
EXPECT:  42)   prev:       0x610000000078
EXPECT:  43)   next:       0x612000000000
EXPECT:  44)   user:       0x612000000820
EXPECT:  45)   foot:       0x612000000ff8
EXPECT:  46)   foot->size: 2008
EXPECT:  47) 
EXPECT:  48) POINTERS
EXPECT:  49) ptr[ 0]: (nil)
EXPECT:  50) ptr[ 1]: 0x612000000820
EXPECT:  51) ptr[ 2]: 0x612000000020
EXPECT:  52) ptr[ 3]: (nil)
EXPECT:  53) 
EXPECT:  54) USED BLOCKS 2
EXPECT:  55) HEAP STATS (overhead per node: 40)
EXPECT:  56) heap_start:  0x612000000000
EXPECT:  57) heap_end:    0x612000001000
EXPECT:  58) total_bytes: 4096
EXPECT:  59) AVAILABLE LIST: {length:   1  bytes:  1000}
EXPECT:  60)   [  0] head @ 0x612000000418 {state: a  size:   960}
EXPECT:  61) USED LIST: {length:   2  bytes:  3096}
EXPECT:  62)   [  0] head @ 0x612000000000 {state: u  size:  1008}
EXPECT:  63)   [  1] head @ 0x612000000800 {state: u  size:  2008}
EXPECT:  64) HEAP BLOCKS:
EXPECT:  65) [  0] @ 0x612000000000
EXPECT:  66)   state:      u
EXPECT:  67)   size:       1008 (total: 0x418)
EXPECT:  68)   prev:       0x610000000078
EXPECT:  69)   next:       0x612000000800
EXPECT:  70)   user:       0x612000000020
EXPECT:  71)   foot:       0x612000000410
EXPECT:  72)   foot->size: 1008
EXPECT:  73) [  1] @ 0x612000000418
EXPECT:  74)   state:      a
EXPECT:  75)   size:       960 (total: 0x3e8)
EXPECT:  76)   prev:       0x610000000018
EXPECT:  77)   next:       0x610000000038
EXPECT:  78)   user:       0x612000000438
EXPECT:  79)   foot:       0x6120000007f8
EXPECT:  80)   foot->size: 960
EXPECT:  81) [  2] @ 0x612000000800
EXPECT:  82)   state:      u
EXPECT:  83)   size:       2008 (total: 0x800)
EXPECT:  84)   prev:       0x612000000000
EXPECT:  85)   next:       0x610000000098
EXPECT:  86)   user:       0x612000000820
EXPECT:  87)   foot:       0x612000000ff8
EXPECT:  88)   foot->size: 2008
EXPECT:  89) 

--- Valgrind Log from: test-results/raw/el_malloc-09-valgrd.tmp ---
==2797886== Memcheck, a memory error detector
==2797886== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2797886== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==2797886== Command: ./test_el_malloc No\ Split
==2797886== Parent PID: 2797885
==2797886== 
==2797886== Invalid write of size 8
==2797886==    at 0x10AE3E: el_add_block_front (el_malloc.c:258)
==2797886==    by 0x10AF8E: el_malloc (el_malloc.c:351)
==2797886==    by 0x10A219: main (test_el_malloc.c:277)
==2797886==  Address 0x18 is not stack'd, malloc'd or (recently) free'd
==2797886== 
==2797886== 
==2797886== Process terminating with default action of signal 11 (SIGSEGV)
==2797886==  Access not within mapped region at address 0x18
==2797886==    at 0x10AE3E: el_add_block_front (el_malloc.c:258)
==2797886==    by 0x10AF8E: el_malloc (el_malloc.c:351)
==2797886==    by 0x10A219: main (test_el_malloc.c:277)
==2797886==  If you believe this happened as a result of a stack
==2797886==  overflow in your program's main thread (unlikely but
==2797886==  possible), you can try to increase the size of the
==2797886==  main thread stack using the --main-stacksize= flag.
==2797886==  The main thread stack size used in this run was 8388608.
==2797886== 
==2797886== HEAP SUMMARY:
==2797886==     in use at exit: 0 bytes in 0 blocks
==2797886==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==2797886== 
==2797886== All heap blocks were freed -- no leaks are possible
==2797886== 
==2797886== For lists of detected and suppressed errors, rerun with: -s
==2797886== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

