* (TEST 4) Single Allocate/Free
COMMENTS:
** program: ./test_el_malloc "Single Allocate/Free"

** --- Failure messages --- 
- FAILURE(139) due to SIGSEGV (segmentation fault) from OS
- FAILURE: Output Mismatch at lines marked

** --- Side by Side Differences ---
- Expect output in: test-results/raw/el_malloc-04-expect.tmp
- Actual output in: test-results/raw/el_malloc-04-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
#+BEGIN_SRC sbs-diff
==== EXPECT ====                                                         ==== ACTUAL ====                                                      
{                                                                        {
    // Tests a single allocate followed by freeing that block. The           // Tests a single allocate followed by freeing that block. The
    // free()'d block should be merged with the other available block        // free()'d block should be merged with the other available block
    // into a single large available block.                                  // into a single large available block.

    void *ptr[16] = {};                                                      void *ptr[16] = {};
    int len = 0;                                                             int len = 0;

    ptr[len++] = el_malloc(128);                                             ptr[len++] = el_malloc(128);
    printf("\nMALLOC 0\n"); el_print_stats(); printf("\n");                  printf("\nMALLOC 0\n"); el_print_stats(); printf("\n");
    printf("POINTERS\n"); print_ptrs(ptr, len);                              printf("POINTERS\n"); print_ptrs(ptr, len);

    el_free(ptr[0]);                                                         el_free(ptr[0]);
    printf("\nFREE 0\n"); el_print_stats(); printf("\n");                    printf("\nFREE 0\n"); el_print_stats(); printf("\n");
}                                                                        }

MALLOC 0                                                                 MALLOC 0
HEAP STATS (overhead per node: 40)                                       HEAP STATS (overhead per node: 40)
heap_start:  0x612000000000                                              heap_start:  0x612000000000
heap_end:    0x612000001000                                              heap_end:    0x612000001000
total_bytes: 4096                                                        total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3928}                              AVAILABLE LIST: {length:   1  bytes:  3928}
  [  0] head @ 0x6120000000a8 {state: a  size:  3888}                      [  0] head @ 0x6120000000a8 {state: a  size:  3888}
USED LIST: {length:   1  bytes:   168}                                   USED LIST: {length:   1  bytes:   168}
  [  0] head @ 0x612000000000 {state: u  size:   128}                      [  0] head @ 0x612000000000 {state: u  size:   128}
HEAP BLOCKS:                                                             HEAP BLOCKS:
[  0] @ 0x612000000000                                                   [  0] @ 0x612000000000
  state:      u                                                            state:      u
  size:       128 (total: 0xa8)                                            size:       128 (total: 0xa8)
  prev:       0x610000000078                                               prev:       0x610000000078
  next:       0x610000000098                                               next:       0x610000000098
  user:       0x612000000020                                               user:       0x612000000020
  foot:       0x6120000000a0                                               foot:       0x6120000000a0
  foot->size: 128                                                          foot->size: 128
[  1] @ 0x6120000000a8                                                   [  1] @ 0x6120000000a8
  state:      a                                                            state:      a
  size:       3888 (total: 0xf58)                                          size:       3888 (total: 0xf58)
  prev:       0x610000000018                                               prev:       0x610000000018
  next:       0x610000000038                                               next:       0x610000000038
  user:       0x6120000000c8                                               user:       0x6120000000c8
  foot:       0x612000000ff8                                               foot:       0x612000000ff8
  foot->size: 3888                                                         foot->size: 3888

POINTERS                                                                 POINTERS
ptr[ 0]: 0x612000000020                                                  ptr[ 0]: 0x612000000020

FREE 0                                                                   FREE 0
HEAP STATS (overhead per node: 40)                                       HEAP STATS (overhead per node: 40)
heap_start:  0x612000000000                                              heap_start:  0x612000000000
heap_end:    0x612000001000                                              heap_end:    0x612000001000
total_bytes: 4096                                                        total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  4096}                            | AVAILABLE LIST: {length:   2  bytes:  8024}
  [  0] head @ 0x612000000000 {state: a  size:  4056}                      [  0] head @ 0x612000000000 {state: a  size:  4056}
USED LIST: {length:   0  bytes:     0}                                 |   [  1] head @ 0x610000000038 {state: E  size:     0}
HEAP BLOCKS:                                                           | USED LIST: {length: 18446744073709551615  bytes: 18446744073709547688}
[  0] @ 0x612000000000                                                 |   [  0] head @ 0x610000000098 {state: E  size:     0}
  state:      a                                                        |   [  1] head @ (nil) 
  size:       4056 (total: 0x1000)                                     <
  prev:       0x610000000018                                           <
  next:       0x610000000038                                           <
  user:       0x612000000020                                           <
  foot:       0x612000000ff8                                           <
  foot->size: 4056                                                     <
                                                                       <
#+END_SRC

** --- Line Differences ---
EXPECT:  52) AVAILABLE LIST: {length:   1  bytes:  4096}
ACTUAL:  52) AVAILABLE LIST: {length:   2  bytes:  8024}
EXPECT:  54) USED LIST: {length:   0  bytes:     0}
EXPECT:  55) HEAP BLOCKS:
EXPECT:  56) [  0] @ 0x612000000000
EXPECT:  57)   state:      a
EXPECT:  58)   size:       4056 (total: 0x1000)
EXPECT:  59)   prev:       0x610000000018
EXPECT:  60)   next:       0x610000000038
EXPECT:  61)   user:       0x612000000020
EXPECT:  62)   foot:       0x612000000ff8
EXPECT:  63)   foot->size: 4056
EXPECT:  64) 
ACTUAL:  54)   [  1] head @ 0x610000000038 {state: E  size:     0}
ACTUAL:  55) USED LIST: {length: 18446744073709551615  bytes: 18446744073709547688}
ACTUAL:  56)   [  0] head @ 0x610000000098 {state: E  size:     0}
ACTUAL:  57)   [  1] head @ (nil) 

--- Valgrind Log from: test-results/raw/el_malloc-04-valgrd.tmp ---
==2797347== Memcheck, a memory error detector
==2797347== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2797347== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==2797347== Command: ./test_el_malloc Single\ Allocate/Free
==2797347== Parent PID: 2797346
==2797347== 
==2797347== Invalid read of size 8
==2797347==    at 0x10A9C4: el_print_blocklist (el_malloc.c:159)
==2797347==    by 0x10ABB0: el_print_stats (el_malloc.c:222)
==2797347==    by 0x109A5F: main (test_el_malloc.c:132)
==2797347==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2797347== 
==2797347== 
==2797347== Process terminating with default action of signal 11 (SIGSEGV)
==2797347==  Access not within mapped region at address 0x0
==2797347==    at 0x10A9C4: el_print_blocklist (el_malloc.c:159)
==2797347==    by 0x10ABB0: el_print_stats (el_malloc.c:222)
==2797347==    by 0x109A5F: main (test_el_malloc.c:132)
==2797347==  If you believe this happened as a result of a stack
==2797347==  overflow in your program's main thread (unlikely but
==2797347==  possible), you can try to increase the size of the
==2797347==  main thread stack using the --main-stacksize= flag.
==2797347==  The main thread stack size used in this run was 8388608.
==2797347== 
==2797347== HEAP SUMMARY:
==2797347==     in use at exit: 0 bytes in 0 blocks
==2797347==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==2797347== 
==2797347== All heap blocks were freed -- no leaks are possible
==2797347== 
==2797347== For lists of detected and suppressed errors, rerun with: -s
==2797347== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

