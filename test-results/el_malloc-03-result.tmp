* (TEST 3) Required Basics
COMMENTS:
** program: ./test_el_malloc "Required Basics"

** --- Failure messages --- 
- FAILURE(139) due to SIGSEGV (segmentation fault) from OS
- FAILURE: Output Mismatch at lines marked

** --- Side by Side Differences ---
- Expect output in: test-results/raw/el_malloc-03-expect.tmp
- Actual output in: test-results/raw/el_malloc-03-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
#+BEGIN_SRC sbs-diff
==== EXPECT ====                                                      ==== ACTUAL ====                                                   
{                                                                     {
    // Allocates 3 blocks then tests that required functions like         // Allocates 3 blocks then tests that required functions like
    // el_get_header() and el_block_below() correctly calculate the       // el_get_header() and el_block_below() correctly calculate the
    // positions of block parts and adjacent blocks.                      // positions of block parts and adjacent blocks.

    void *ptr[16] = {};                                                   void *ptr[16] = {};
    int len = 0;                                                          int len = 0;

    ptr[len++] = el_malloc(128);                                          ptr[len++] = el_malloc(128);
    ptr[len++] = el_malloc(200);                                          ptr[len++] = el_malloc(200);
    ptr[len++] = el_malloc(64);                                           ptr[len++] = el_malloc(64);

    el_blockhead_t *head = el_ctl->used->beg->next;                       el_blockhead_t *head = el_ctl->used->beg->next;
    el_blockfoot_t *foot;                                                 el_blockfoot_t *foot;

    foot = el_get_footer(head);                                           foot = el_get_footer(head);
    head = el_get_header(foot);                                           head = el_get_header(foot);
    print_ptr("used head 0",head);                                        print_ptr("used head 0",head);
    print_ptr("used foot 0",foot);                                        print_ptr("used foot 0",foot);

    head = el_block_below(head);                                          head = el_block_below(head);
    foot = el_get_footer(head);                                           foot = el_get_footer(head);
    head = el_get_header(foot);                                           head = el_get_header(foot);
    print_ptr("used head 1",head);                                        print_ptr("used head 1",head);
    print_ptr("used foot 1",foot);                                        print_ptr("used foot 1",foot);

    head = el_block_below(head);                                          head = el_block_below(head);
    foot = el_get_footer(head);                                           foot = el_get_footer(head);
    head = el_get_header(foot);                                           head = el_get_header(foot);
    print_ptr("used head 2",head);                                        print_ptr("used head 2",head);
    print_ptr("used foot 2",foot);                                        print_ptr("used foot 2",foot);

    head = el_block_below(head);                                          head = el_block_below(head);
    printf("used head below 2 is: %p\n",head);                            printf("used head below 2 is: %p\n",head);

    printf("POINTERS\n"); print_ptrs(ptr, len);                           printf("POINTERS\n"); print_ptrs(ptr, len);
}                                                                     }
used head 0: 0x612000000198                                           used head 0: 0x612000000198
used foot 0: 0x6120000001f8                                           used foot 0: 0x6120000001f8
used head 1: 0x6120000000a8                                           used head 1: 0x6120000000a8
used foot 1: 0x612000000190                                           used foot 1: 0x612000000190
used head 2: 0x612000000000                                         <
used foot 2: 0x6120000000a0                                         <
used head below 2 is: (nil)                                         <
POINTERS                                                            <
ptr[ 0]: 0x612000000020                                             <
ptr[ 1]: 0x6120000000c8                                             <
ptr[ 2]: 0x6120000001b8                                             <
#+END_SRC

** --- Line Differences ---
EXPECT:  42) used head 2: 0x612000000000
EXPECT:  43) used foot 2: 0x6120000000a0
EXPECT:  44) used head below 2 is: (nil)
EXPECT:  45) POINTERS
EXPECT:  46) ptr[ 0]: 0x612000000020
EXPECT:  47) ptr[ 1]: 0x6120000000c8
EXPECT:  48) ptr[ 2]: 0x6120000001b8

--- Valgrind Log from: test-results/raw/el_malloc-03-valgrd.tmp ---
==2797272== Memcheck, a memory error detector
==2797272== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2797272== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==2797272== Command: ./test_el_malloc Required\ Basics
==2797272== Parent PID: 2797269
==2797272== 
==2797272== Invalid read of size 8
==2797272==    at 0x10A8E2: el_get_footer (el_malloc.c:90)
==2797272==    by 0x109949: main (test_el_malloc.c:107)
==2797272==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2797272== 
==2797272== 
==2797272== Process terminating with default action of signal 11 (SIGSEGV)
==2797272==  Access not within mapped region at address 0x0
==2797272==    at 0x10A8E2: el_get_footer (el_malloc.c:90)
==2797272==    by 0x109949: main (test_el_malloc.c:107)
==2797272==  If you believe this happened as a result of a stack
==2797272==  overflow in your program's main thread (unlikely but
==2797272==  possible), you can try to increase the size of the
==2797272==  main thread stack using the --main-stacksize= flag.
==2797272==  The main thread stack size used in this run was 8388608.
==2797272== 
==2797272== HEAP SUMMARY:
==2797272==     in use at exit: 0 bytes in 0 blocks
==2797272==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==2797272== 
==2797272== All heap blocks were freed -- no leaks are possible
==2797272== 
==2797272== For lists of detected and suppressed errors, rerun with: -s
==2797272== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

